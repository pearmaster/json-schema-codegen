{%import 'loader.jinja2' as loader with context-%}

{%-set exception %}{{ namer.get_util_namespace("JsonSchemaException") | join("::") }}{%endset%}
{%-set exceptionCollection %}{{ namer.get_util_namespace("JsonSchemaExceptionCollection") | join("::") }}{%endset%}

{%-set item_name = schema.get_item_object_name(Name, namer)%}

{%-if schema.get_item_schema()['$ref'] %}
// Array uses items reference
{%-set itemtype = namer.get_object_name(uri, schema.get_item_schema()['$ref']) %}
{%-else%}
{%-set itemtype = className+'::'+item_name%}

{{-loader.SubClass('cpp', itemtype, item_name, schema.get_item_schema())}}
{%endif%}

{{className}}::{{Name}}(std::vector<{{itemtype}}> arr)
{
    SetArray(arr);
}

{%if schema.minItems is not defined or schema.minItems == 0 -%}
{{className}}::{{Name}}()
{

}
{%-endif%}

void {{className}}::SetArray(const std::vector<{{itemtype}}>& arr)
{
    {%-if schema.maxItems is defined %}
    if (arr.size() > {{schema.maxItems}})
    {
        throw {{exception}}("The array is shorter than {{className}}::MIN_ITEMS={{schema.minItems}}");
    }
    {%-endif%}
    {%-if schema.minItems is defined %}
    if (arr.size() < {{schema.minItems}})
    {
        throw {{exception}}("The array is longer than {{className}}::MAX_ITEMS={{schema.maxItems}}");
    }
    {%-endif%}
    _arr = arr;
}

std::vector<{{itemtype}}> {{className}}::GetArray() const
{
    return _arr;
}

void {{className}}::Append(const {{itemtype}}& item)
{
    {%-if schema.maxItems is defined %}
    if (_arr.size() == {{schema.maxItems}})
    {
        throw std::out_of_range("Adding to {{className}} would cause it to be longer than {{className}}::MAX_ITEMS={{schema.maxItems}}");
    }
    {%-endif%}
    _arr.push_back(item);
}

{{className}} {{className}}::FromJson(const rapidjson::Value& json)
{
    if (!json.IsArray())
    {
        throw {{exception}}("The JSON wasn't an array");
    }
    std::vector<{{itemtype}}> arr;
    {{exceptionCollection}} exceptionCollection;
    unsigned i = 0;
    for (auto& v : json.GetArray())
    {
        try
        {
            arr.push_back({{itemtype}}::FromJson(v));
        }
        catch (const {{exception}}& e)
        {
            exceptionCollection.AddException(e, std::to_string(i));
        }
        catch (const {{exceptionCollection}}& ec)
        {
            exceptionCollection.AddException(ec, std::to_string(i));
        }
        catch (const std::exception& e)
        {
            exceptionCollection.AddException({{exception}}(e), std::to_string(i));
        }
        i++;
    }
    if (exceptionCollection.IsExceptional())
    {
        throw exceptionCollection;
    }
    return {{className}}(arr);
}

void {{className}}::ToJson(rapidjson::Value& value, rapidjson::Value::AllocatorType& allocator) const
{
    value.SetArray();
    for (const {{itemtype}}& el : _arr)
    {
        rapidjson::Value elementValue;
        el.ToJson(elementValue, allocator);
        value.PushBack(elementValue, allocator);
    }
}
