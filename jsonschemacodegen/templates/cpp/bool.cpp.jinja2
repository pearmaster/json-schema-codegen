{%-set std = resolver.cpp_resolve_namespace(['std']) %}
{%-set rapidjson = resolver.cpp_resolve_namespace(['rapidjson']) %}
{%-set className = resolver.cpp_resolve_namespace(ns)+Name%}
{%-set exception %}{{resolver.cpp_get_lib_ns() | join('::')}}::JsonSchemaException{%endset%}

{{className}}::{{Name}}(bool value)
{
    Set(value);
}

{%-if schema.default is defined or schema.const is defined%}
{%set emptyConstructor = true %}
{{className}}::{{Name}}()
{
    Set({%if schema.const is defined%}CONST_VALUE{%else%}DEFAULT_VALUE{%endif%});
}
{%-endif%}

{{className}}::operator bool() const
{
    return Get();
}

{{className}}& {{className}}::operator=(bool value)
{
    Set(value);
    return *this;
}

void {{className}}::Set(bool value)
{
    _value = value;
}

bool {{className}}::Get() const
{
    return _value;
}

{{className}} {{className}}::FromJson(const {{rapidjson}}Value& json)
{
    if (!(json.IsBool()))
    {
        throw {{exception}}("Not a boolean");
    }
    {%if 'const' in schema%}
    if (json.GetBool() != CONST_VALUE)
    {
        throw {{exception}}("Not the required value of '{{schema.const | lower}}'");
    }
    {%endif-%}
    {{className}} newObject(json.GetBool());
    return newObject;
}

void {{className}}::ToJson({{rapidjson}}Value& value, rapidjson::AllocatorType& allocator) const
{
    value.SetBool(_value); 
}
