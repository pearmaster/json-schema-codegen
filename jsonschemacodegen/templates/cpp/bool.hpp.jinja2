{%-set exception %}{{resolver.cpp_get_lib_ns() | join('::')}}::JsonSchemaException{%endset%}
/*! {{Name}} is a wrapper around a boolean.
 {%-if schema.description %}
 * {{schema.description}}
 {%-endif%}
 */
class {{Name}}
{
public:
    {%-if schema.default is defined%}
    /*! The default value of the boolean.
     * If the boolean has not been set to a value, `{{schema.default |lower}}` would be returned for value getting methods.
     */
    static constexpr bool DEFAULT_VALUE = {{schema.default |lower}};
    
    {%-endif%}
    {%-if schema.const is defined%}
    /*! The constant value of the boolean.
     * The value is not allowed to be anything other than `{{schema.const |lower}}`.
     */
    static constexpr bool CONST_VALUE = {{schema.const |lower}};

    {%endif-%}
    {%if schema.default is defined or schema.const is defined%}
    /*! \fn {{Name}}()
     * \brief Constructor that uses default value of {{schema.default}}
     */
    {{Name}}();
    {%endif%}

    virtual ~{{Name}}() = default;

    /*! Cast to bool operator
     */
    operator bool() const;

    /*! \fn bool Get() const
     * \brief get current boolean value
     */
    bool Get() const;

    /*! \fn {{Name}} FromJson(const rapidjson::Value& json)
     * \brief Deserializes JSON into a new instance of the {{Name}} object.
     * \param json is the RapidJSON value which must be a boolean type.
     * \throw {{exception}} If the JSON data is not a boolean
     * \returns {{Name}}
     */
    static {{Name}} FromJson(const rapidjson::Value& json);

    /*! \fn ToJson(rapidjson::Value& value, rapidjson::Value::AllocatorType& allocator)
     * \brief Serializes boolean value to JSON
     * \param value is the RapidJSON value which will be modified to contain the serialization
     * \param allocator is the top-level RapidJSON document allocator which may be used for allocations
     */
    void ToJson(rapidjson::Value& value, rapidjson::Value::AllocatorType& allocator) const;

{%if 'const' in schema%}
private:
{%endif%}
    /*! \fn {{Name}}(bool value)
     * \brief Constructor with initial value
     * \param value initial value
     */
    {{Name}}(bool value);

    /*! Assign from bool operator
     */
    {{Name}}& operator=(bool value);

    /*! \fn void Set(bool value)
     * \brief reset value to new bool
     * \param value new value
     */
    void Set(bool value);

private:
    bool _value;
};